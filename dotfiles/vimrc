set nocompatible              " be iMproved, required
filetype off                  " required

" homebrew vim takes locale lang as default. Overriding it here
language en_US.UTF-8
set encoding=utf-8

filetype plugin indent on

syntax enable
let python_highlight_all=1
syntax on

if (has("termguicolors"))
 set termguicolors
endif

" set background=dark
colorscheme shades_of_purple

" show line number
set nu

" indent rules
set tabstop=4
set softtabstop=4
set shiftwidth=4
set textwidth=120
set expandtab
set autoindent
set fileformat=unix
set backspace=indent,eol,start  " more powerful backspacing

" delay before writing swap file
set updatetime=50

" hilight extra whitespaces
highlight BadWhitespace ctermbg=red guibg=red
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" show status line when editing more than 1 file
set laststatus=1
let g:lightline = {'colorscheme': 'shades_of_purple'}

let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'

" configure ALE
" ALE python options
let g:ale_python_executable = 'python3'
let g:ale_python_pylint_options = '-d C0114,C0115,C0116,R0903,R0911,R0912,W0703,W1514 --max-line-length 120'
" take pylint.rc from current or parent directory
function! FindConfig(prefix, what, where)
    let cfg = findfile(a:what, escape(a:where, ' ') . ';')
    return cfg !=# '' ? ' ' . a:prefix . shellescape(cfg) : ''
endfunction
autocmd FileType python let b:ale_python_pylint_options =
   \ get(g:, 'ale_python_pylint_options', '') .
   \ FindConfig('--rcfile=', 'pylint.rc', expand('<afile>:p:h', 1))
" ALE c++ options
let g:ale_cpp_cc_executable = 'clang++'
let g:ale_cpp_cc_options = '-std=c++20 -Wall -Wextra'

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
nnoremap <C-n> :NERDTree<CR>
let NERDTreeMinimalUI=1
let NERDTreeWinSize=20

" open floaterm window when running script
function! s:run_floaterm_right(opts)
    " asyncrun has temporarily changed working directory for you
    " getcwd() in the runner function is the target directory defined in `-cwd=xxx`
    let cwd = getcwd()
    exec 'FloatermKill floaterm_right'
    let cmd = 'FloatermNew --name=floaterm_right --width=0.4 --height=1.0 --position=right --autoclose=0 ' . fnameescape(a:opts.cmd)
    exec cmd
endfunction

" register custom asyncrun runner for file-run
let g:asyncrun_runner = get(g:, 'asyncrun_runner', {})
let g:asyncrun_runner.floaterm_right = function('s:run_floaterm_right')

" open quickfix window to see command output. Number means window height
let g:asyncrun_open = 10
" close quickfix window in 0.5 s if command returned 0
let g:asyncrun_exit = 'if g:asyncrun_code == 0 | call timer_start(100, {-> execute("cclose")}) | endif'

" shortcuts for build and run with asynctasks. See vim/tasks.ini for task description
noremap <silent><f5> :AsyncTask file-run<cr>
noremap <silent><f9> :AsyncTask file-build<cr>

" set shortcut to AsyncRun in right handed terminal split
cnoreabbrev AR AsyncRun -mode=terminal -pos=right -cols=80 -focus=0S

" Trigger configuration. You need to change this to something other than <tab> if you use one of the following:
" - https://github.com/Valloric/YouCompleteMe
" - https://github.com/nvim-lua/completion-nvim
let g:UltiSnipsExpandTrigger="<c-s>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

autocmd BufNewFile *.cpp    0read ~/.vim/skeletons/codeforces.cpp
